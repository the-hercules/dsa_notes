#include <bits/stdc++.h>
using namespace std;
using names class Solution {
   private:
    void bfs(vector<vector<char>> grid, vector<vector<int>>& vis, int row, int col, int m, int n) {
        vis[row][col] = 1;
        queue<pair<int, int>> q;
        q.push(make_pair(row, col));
        while (!q.empty()) {
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            // traverse the horizonal and vertical adjacent nodes;
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    // avoid diagonal traverlsal
                    if (!(i == 1 && j == 1) && !(i == -1 && j == -1) && !(i == -1 && j == 1) && !(i == 1 && j == -1)) {
                        int nrow = row + i;
                        int ncol = col + j;
                        if (nrow < m && ncol < n && nrow >= 0 && ncol >= 0 && grid[nrow][ncol] == '1' && !vis[nrow][ncol]) {
                            q.push(make_pair(nrow, ncol));
                            vis[nrow][ncol] = 1;
                        }
                    }
                }
            }
        }
    }

   public:
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        int count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1' && !vis[i][j]) {
                    count++;
                    bfs(grid, vis, i, j, m, n);
                }
            }
        }
        return count;
    }
};